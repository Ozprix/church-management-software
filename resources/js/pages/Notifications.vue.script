<script setup>
import { ref, computed, onMounted, watch } from 'vue';
import { useRouter } from 'vue-router';
import { useNotificationStore } from '../stores/notifications';
import notificationService from '../services/notificationService';
import Modal from '../components/ui/Modal.vue';
import Button from '../components/ui/Button.vue';
import Toggle from '../components/ui/Toggle.vue';

const router = useRouter();
const notificationStore = useNotificationStore();

// State
const showSettings = ref(false);
const settings = ref({ ...notificationStore.settings });
const currentPage = ref(1);
const itemsPerPage = ref(10);
const filters = ref({
  status: 'all',
  category: 'all',
  timeframe: 'all',
  search: ''
});

// Computed properties
const unreadCount = computed(() => notificationStore.unreadCount);

const filteredNotifications = computed(() => {
  let notifications = [...notificationStore.notifications];
  
  // Filter by status
  if (filters.value.status === 'unread') {
    notifications = notifications.filter(n => !n.read);
  } else if (filters.value.status === 'read') {
    notifications = notifications.filter(n => n.read);
  }
  
  // Filter by category
  if (filters.value.category !== 'all') {
    notifications = notifications.filter(n => n.category === filters.value.category);
  }
  
  // Filter by timeframe
  if (filters.value.timeframe !== 'all') {
    const now = new Date();
    let cutoffDate;
    
    if (filters.value.timeframe === 'today') {
      cutoffDate = new Date(now.setHours(0, 0, 0, 0));
    } else if (filters.value.timeframe === 'week') {
      cutoffDate = new Date(now);
      cutoffDate.setDate(cutoffDate.getDate() - 7);
    } else if (filters.value.timeframe === 'month') {
      cutoffDate = new Date(now);
      cutoffDate.setMonth(cutoffDate.getMonth() - 1);
    }
    
    notifications = notifications.filter(n => new Date(n.timestamp) >= cutoffDate);
  }
  
  // Filter by search
  if (filters.value.search.trim() !== '') {
    const searchTerm = filters.value.search.toLowerCase();
    notifications = notifications.filter(n => 
      n.title.toLowerCase().includes(searchTerm) || 
      n.message.toLowerCase().includes(searchTerm)
    );
  }
  
  return notifications;
});

const paginatedNotifications = computed(() => {
  const start = (currentPage.value - 1) * itemsPerPage.value;
  const end = start + itemsPerPage.value;
  return filteredNotifications.value.slice(start, end);
});

const totalPages = computed(() => {
  return Math.ceil(filteredNotifications.value.length / itemsPerPage.value) || 1;
});

const paginationStart = computed(() => {
  return (currentPage.value - 1) * itemsPerPage.value + 1;
});

const paginationEnd = computed(() => {
  return Math.min(currentPage.value * itemsPerPage.value, filteredNotifications.value.length);
});

// Methods
function markAsRead(id) {
  notificationService.markAsRead(id);
}

function markAllAsRead() {
  notificationService.markAllAsRead();
}

function removeNotification(id) {
  notificationService.remove(id);
}

function navigateTo(notification) {
  if (notification.link) {
    markAsRead(notification.id);
    router.push(notification.link);
  }
}

function openSettings() {
  showSettings.value = true;
}

function updateSettings() {
  // This is called whenever a setting is changed
  // We don't save immediately to allow for multiple changes
}

function saveSettings() {
  notificationStore.updateSettings(settings.value);
  showSettings.value = false;
}

function formatDate(timestamp) {
  const date = new Date(timestamp);
  return date.toLocaleDateString('en-US', { 
    year: 'numeric', 
    month: 'short', 
    day: 'numeric' 
  });
}

function formatTimeAgo(timestamp) {
  const now = new Date();
  const date = new Date(timestamp);
  const seconds = Math.floor((now - date) / 1000);
  
  let interval = Math.floor(seconds / 31536000);
  if (interval >= 1) {
    return interval === 1 ? '1 year ago' : `${interval} years ago`;
  }
  
  interval = Math.floor(seconds / 2592000);
  if (interval >= 1) {
    return interval === 1 ? '1 month ago' : `${interval} months ago`;
  }
  
  interval = Math.floor(seconds / 86400);
  if (interval >= 1) {
    return interval === 1 ? '1 day ago' : `${interval} days ago`;
  }
  
  interval = Math.floor(seconds / 3600);
  if (interval >= 1) {
    return interval === 1 ? '1 hour ago' : `${interval} hours ago`;
  }
  
  interval = Math.floor(seconds / 60);
  if (interval >= 1) {
    return interval === 1 ? '1 minute ago' : `${interval} minutes ago`;
  }
  
  return 'Just now';
}

function getCategoryColor(category) {
  const colors = {
    members: 'bg-blue-500',
    events: 'bg-purple-500',
    groups: 'bg-green-500',
    donations: 'bg-yellow-500',
    system: 'bg-neutral-500'
  };
  
  return colors[category] || 'bg-primary-500';
}

function getCategoryBadgeClass(category) {
  const classes = {
    members: 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300',
    events: 'bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-300',
    groups: 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300',
    donations: 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300',
    system: 'bg-neutral-100 text-neutral-800 dark:bg-neutral-900 dark:text-neutral-300'
  };
  
  return classes[category] || 'bg-primary-100 text-primary-800 dark:bg-primary-900 dark:text-primary-300';
}

function getCategoryName(category) {
  const names = {
    members: 'Member',
    events: 'Event',
    groups: 'Group',
    donations: 'Donation',
    system: 'System'
  };
  
  return names[category] || 'Notification';
}

function getEmptyStateMessage() {
  if (filters.value.status === 'unread') {
    return 'You have no unread notifications.';
  } else if (filters.value.status === 'read') {
    return 'You have no read notifications.';
  } else if (filters.value.category !== 'all') {
    return `You have no ${filters.value.category} notifications.`;
  } else if (filters.value.search) {
    return `No notifications match your search for "${filters.value.search}".`;
  } else {
    return 'You have no notifications yet. Notifications will appear here when there are updates or activities in the system.';
  }
}

function prevPage() {
  if (currentPage.value > 1) {
    currentPage.value--;
  }
}

function nextPage() {
  if (currentPage.value < totalPages.value) {
    currentPage.value++;
  }
}

function goToPage(page) {
  currentPage.value = page;
}

// Reset pagination when filters change
watch(filters, () => {
  currentPage.value = 1;
}, { deep: true });

// Watch for changes to notification settings
watch(() => notificationStore.settings, (newSettings) => {
  settings.value = { ...newSettings };
}, { deep: true });

// Initialize the page
onMounted(() => {
  // Add sample notifications for demo purposes
  if (notificationStore.notifications.length === 0) {
    addSampleNotifications();
  }
});

// Function to add sample notifications for demonstration
function addSampleNotifications() {
  const now = new Date();
  const yesterday = new Date(now);
  yesterday.setDate(yesterday.getDate() - 1);
  const lastWeek = new Date(now);
  lastWeek.setDate(lastWeek.getDate() - 7);
  
  const sampleNotifications = [
    {
      title: 'New Member Registration',
      message: 'John Smith has registered as a new member.',
      category: 'members',
      timestamp: now.toISOString(),
      read: false,
      link: '/members/1'
    },
    {
      title: 'Upcoming Event',
      message: 'Sunday Service will start at 10:00 AM tomorrow.',
      category: 'events',
      timestamp: yesterday.toISOString(),
      read: true,
      link: '/events/1'
    },
    {
      title: 'Donation Received',
      message: 'A donation of $500 has been received for the Building Fund.',
      category: 'donations',
      timestamp: yesterday.toISOString(),
      read: false,
      link: '/donations/1'
    },
    {
      title: 'Group Meeting Changed',
      message: 'Youth Group meeting has been rescheduled to Friday at 7:00 PM.',
      category: 'groups',
      timestamp: lastWeek.toISOString(),
      read: true,
      link: '/groups/1'
    },
    {
      title: 'System Update',
      message: 'The church management system has been updated to version 2.0.',
      category: 'system',
      timestamp: lastWeek.toISOString(),
      read: false
    }
  ];
  
  sampleNotifications.forEach(notification => {
    notificationService.send(notification);
  });
}
</script>
